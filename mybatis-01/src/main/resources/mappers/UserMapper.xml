<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--命名空间就是为了防止重复用的，你可以使用自定义的命名，也可以使用某个接口的全限定名称-->
<!--<mapper namespace="user">-->
<mapper namespace="org.example.mapper.UserMapper">

    <!--如果将sql的列名从username改成user_name就会导致查询不到，而改的话代码每一处都得修改别名，但是用resultMap映射结果集就只用改一次就行了-->
    <!--但是需要注意，需要把下面的各个resultType改成resultMap=resultMap的id-->
    <resultMap id="UserResultMap" type="org.example.entity.User">
        <id column="id" property="id"/>
        <!--这里就是做了别名映射，让sql里的列名与java中的别名对应映射起来-->
        <result column="user_name" property="username"/>
        <result column="password" property="password"/>
    </resultMap>

    <!--这里就是sql代码块，用来替换一些重复性高的代码，下面就写一套标准的单表CRUD操作，分为单个操作和批量操作-->
    <sql id="sql">
        id, user_name, password
    </sql>


    <select id="select" resultMap="UserResultMap">
        select * from user where user_name = #{username} and password = #{password}
    </select>

    <!--这就是动态SQL，能根据前端传过来的参数来生成相应的sql的语句-->
    <select id="selectByUser" resultMap="UserResultMap">
        select <include refid="sql"/> from user
        <where>
            <choose>
                <when test="id != null">
                    and id = #{id}
                </when>
                <when test="username != null and username != ''">
                    and user_name = #{username}
                </when>
                <when test="password != null and password != ''">
                    and password = #{password}
                </when>
            </choose>
        </where>
    </select>

    <insert id="insert" parameterType="org.example.entity.User">
        insert into user(<include refid="sql"/>) values(#{id}, #{username}, #{password})
    </insert>

    <!--动态sql实现批量插入-->
    <insert id="insertBatch">
        insert into user(user_name, password) values
        <foreach collection="users" item="user" separator=",">
            (#{user.username}, #{user.password})
        </foreach>
    </insert>

    <update id="update" parameterType="org.example.entity.User">
        <!--        update user set username=#{username}, password=#{password} where id = #{id}-->
        update user
        <set>
            <if test="username != null and username != ''">
                user_name = #{username},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
        </set>
        <where>
            <!--其实如果这里不传id，就会全给你改了，所以建议写死好一些，这样不写id会报错，不会造成实质性影响-->
            <!--            <if test="id != null">-->
            <!--                id = #{id}-->
            <!--            </if>-->
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from user where id = #{id}
    </delete>

    <delete id="deleteByIds">
        delete from user where id in
        <!--将id集合称呼为ids，集合中每一个元素都称为id open是开始，close是结束-->
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
</mapper>